{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["Component","wouldUpdate","date","UpdateAt","dates","delay","children","forceUpdate","setValue","React","value","useForceUpdate","timeoutRefs","shouldProcessDates","window","Math","Date","timeoutFactory","timeout","clearTimeout","EventTimeLabelUpdateAt","event","start","end","props","Error","App","title","now","toString","ReactDOM","render","document","getElementById"],"mappings":"qgCAiBA,IA4CsBA,EA5ChBC,EAAc,SAACC,GACnB,OAAIA,EAAO,IAAX,MAWIC,EAAW,SAAC,G,IAAEC,U,IAAOC,iBAAQA,EAAA,KAAIC,aAC/BC,EAlBR,WACE,IAASC,EAAYC,aAArB,MACA,OAAO,kBAAMD,GAAS,mBAAWE,EAAX,MAgBFC,GA4BpB,OA1BAF,eAAgB,WACd,IAAIG,EAAJ,GAgBA,OA3BuB,SAACR,GAC1B,gCAA0B,KAAfF,EAAe,QACxB,GAAID,EAAJ,GAAuB,OAAO,EAEhC,SAqBMY,CAAJ,IAbuB,WACrB,gCAA0B,KAAfX,EAAe,QACpBD,EAAJ,IACEW,OACEE,OAAA,YACE,kBAAMP,MACNQ,SAASb,YAAiBc,KAA1BD,OAHJH,KAUyBK,GAExB,WACL,GAAIL,EAAJ,OACE,gCAAmC,KAAxBM,EAAwB,QACjCC,oBAIL,CAxBHV,IA0BOA,iBAAP,IC9BIW,GDiCgBpB,EC7CC,SAAC,GAAsB,IAApBqB,EAAmB,EAAnBA,MACxB,OACE,6BACG,IAAIL,KAAS,IAAIA,KAAKK,EAAMjB,MAAMkB,OAC/B,WACA,IAAIN,KAAS,IAAIA,KAAKK,EAAMjB,MAAMmB,KAClC,cACA,WDsC6C,Y,IACrDnB,UACAC,UACGmB,E,oIAAAA,sBAEH,YAAIxB,EACF,MAAM,IAAIyB,MACR,CAAC,uEAAD,6CADF,OAOF,OACE,qBAAUrB,MAAOA,EAAOC,MAAOA,GAC7BI,qCAFJ,OC1BaiB,EAlBH,WACV,IAAML,EAAQ,CACZM,MAAO,iBACPvB,MAAO,CACLkB,MAAO,sBACPC,IAAK,wBAKT,OAFAF,EAAMjB,MAAMkB,MAAQ,IAAIN,KAAKA,KAAKY,MAAQ,KAAKC,WAC/CR,EAAMjB,MAAMmB,IAAM,IAAIP,KAAKA,KAAKY,MAAQ,KAAMC,WAE5C,kBAACT,EAAD,CACEC,MAAOA,EACPjB,MAAO,CAAC,IAAIY,KAAKK,EAAMjB,MAAMkB,OAAQ,IAAIN,KAAKK,EAAMjB,MAAMmB,S,OCvChEO,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ac6e250b.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface UpdateAtProps {\n  dates: Date[];\n  delay?: number;\n  [x: string]: any;\n}\n\ninterface UpdateAtCompProps extends UpdateAtProps {\n  children: React.ReactElement;\n}\n\nfunction useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue((value) => value + 1);\n}\n\nconst wouldUpdate = (date: Date): boolean => {\n  if (date > new Date()) return true;\n  return false;\n};\n\nconst shouldProcessDates = (dates: Date[]) => {\n  for (const date of dates) {\n    if (wouldUpdate(date)) return true;\n  }\n  return false;\n};\n\nconst UpdateAt = ({ dates, delay = 10, children }: UpdateAtCompProps) => {\n  const forceUpdate = useForceUpdate();\n  // useEffect hook\n  React.useEffect(() => {\n    let timeoutRefs: number[] = [];\n    const timeoutFactory = () => {\n      for (const date of dates) {\n        if (wouldUpdate(date)) {\n          timeoutRefs.push(\n            window.setTimeout(\n              () => forceUpdate(),\n              Math.abs(date.getTime() - Date.now()) + delay\n            )\n          );\n        }\n      }\n    };\n    // is there any date in future\n    if (shouldProcessDates(dates)) timeoutFactory();\n    // cleanup\n    return () => {\n      if (timeoutRefs.length) {\n        for (const timeout of timeoutRefs) {\n          clearTimeout(timeout);\n        }\n      }\n    };\n  }, [dates]);\n  // clone element so it can be updated\n  return React.cloneElement(children);\n};\n\nconst withUpdateAt = (Component: React.ElementType) => ({\n  dates,\n  delay,\n  ...props\n}: UpdateAtProps) => {\n  if (Component === undefined) {\n    throw new Error(\n      [\n        \"You are calling withUpdateAt(Component) with an undefined component.\",\n        \"You may have forgotten to import it.\"\n      ].join(\"\\n\")\n    );\n  }\n  return (\n    <UpdateAt dates={dates} delay={delay}>\n      <Component {...props} />\n    </UpdateAt>\n  );\n};\n\nexport { withUpdateAt };\nexport default UpdateAt;\n","import React from \"react\";\nimport { withUpdateAt } from \"react-update-at\";\n\ninterface Dates {\n  start: Date;\n  end: Date;\n}\ninterface EventProps {\n  title: string;\n  dates: Dates;\n}\n\ninterface Props {\n  event: EventProps;\n}\n\nconst EventTimeLabel = ({ event }: Props) => {\n  return (\n    <div>\n      {new Date() < new Date(event.dates.start)\n        ? \"UpComing\"\n        : new Date() < new Date(event.dates.end)\n        ? \"In progress\"\n        : \"Passed\"}\n    </div>\n  );\n};\n\nconst EventTimeLabelUpdateAt = withUpdateAt(EventTimeLabel);\n\nconst App = () => {\n  const event = {\n    title: \"My sweet event\",\n    dates: {\n      start: \"2021-01-01T10:00:00\",\n      end: \"2021-01-01T11:00:00\"\n    }\n  };\n  event.dates.start = new Date(Date.now() + 5e3).toString();\n  event.dates.end = new Date(Date.now() + 10e3).toString();\n  return (\n    <EventTimeLabelUpdateAt\n      event={event}\n      dates={[new Date(event.dates.start), new Date(event.dates.end)]}\n    />\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}